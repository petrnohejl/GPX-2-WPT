#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
GPX2WPT version 1.1

Copyright (C)2008 Petr Nohejl, jestrab.net

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

This program comes with ABSOLUTELY NO WARRANTY!
"""

### IMPORT #####################################################################

import xml.sax	# parsovani xml
import sys		# argv
import string	# prace s retezci
import codecs	# kodovani

import xmlchar	# zruseni diakritiky v xml



### KONSTANTY A GLOBALNI PROMENNE ##############################################

get = []	# ziskana data z xml
CONST_HEAD = "OziExplorer Waypoint File Version 1.1\nWGS 84\nReserved 2\nReserved 3\n"	# hlavicka .wpt souboru



### ERRORS A HELP ##############################################################

def ErrorArg():
	print "Error: Incorrect arguments!\nTo show help, run program with parameter -h."
	return
	
def ErrorXml():
	print "Error: Cannot parse XML!\nXML file is invalid or doesn't exist."
	return

def Help():
	print "GPX2WPT version 1.1"
	print ""
	print "Copyright (c)2008 Petr Nohejl, jestrab.net"
	print ""
	print "Program create waypoint file for Ozi Explorer from XML (GPX) file"
	print "generated by CachePrinter (cacheprinter.bubbles.sk)."
	print ""
	print "Usage: gpx2wpt xml_file wpt_file"
	print "       gpx2wpt -h"
	return
	
	
	
### HANDLER ####################################################################

class Handler(xml.sax.ContentHandler):
	# inicializace
	def __init__ (self):
		self.lat = ""
		self.lon = ""
		self.tag = ""
		self.list = ["", "", "", "", "", "", "", ""]
		
	# zacatek tagu
	def startElement(self, name, attributes):
		if name == u"wpt":
			self.lat = attributes.getValue("lat")
			self.lon = attributes.getValue("lon")
			self.list[1] = self.lat
			self.list[2] = self.lon
		elif name == "desc":
			self.tag = "n"
		elif name == "groundspeak:encoded_hints":
			self.tag = "h"
		elif name == "groundspeak:container":
			self.tag = "c"
		elif name == "groundspeak:difficulty":
			self.tag = "d"
		elif name == "groundspeak:terrain":
			self.tag = "t"
		elif name == "groundspeak:type":
			self.tag = "y"

	# obsah tagu
	def characters(self, content):
		if(self.tag == "n"): 
			self.list[0] = content
		elif(self.tag == "h"): 
			self.list[3] = content
			get.append(self.list[:])
		elif(self.tag == "c"): 
			self.list[4] = content
		elif(self.tag == "d"): 
			self.list[5] = content
		elif(self.tag == "t"): 
			self.list[6] = content
		elif(self.tag == "y"): 
			self.list[7] = content
		self.tag = ""



### EDIT TEXT ##################################################################

# nahrada znaku a zkraceni textu
def Filter(text):
	text = string.strip(text)				# orizne bile znaky
	text = string.replace(text,",",".")		# nahradi carku za tecku
	text = string.replace(text," - ","-")	# odstrani zbytecne mezery
	text = string.replace(text," / ","/")	# odstrani zbytecne mezery
	text = string.replace(text,". ",".")	# odstrani zbytecne mezery
	text = string.replace(text,"; ",";")	# odstrani zbytecne mezery
	text = string.replace(text,"! ","!")	# odstrani zbytecne mezery
	text = string.replace(text,"? ","?")	# odstrani zbytecne mezery
	text = string.replace(text,": ",":")	# odstrani zbytecne mezery
	text = string.replace(text," (","(")	# odstrani zbytecne mezery
	text = string.replace(text,") ",")")	# odstrani zbytecne mezery
	text = string.replace(text," [","[")	# odstrani zbytecne mezery
	text = string.replace(text,"] ","]")	# odstrani zbytecne mezery
	text = string.replace(text,"  "," ")	# nahradi 2 mezery za 1 mezeru
	return text



# upravi nazev
def EditName(name):
	# orizne cast za lomitkem
	list = string.split(name, "/")
	name = list[0]
	
	# optimalizace textu
	name = Filter(name)
	
	# omezena delka nazvu
	if(len(name)>31):
		name = name[:31] + "_"

	return name
	
	
	
# upravi souradnice
def EditCoord(coord):
	list = string.split(coord, ".")
	
	# orizne prebytecne cislice
	if(len(list[1])>7):
		part = list[1][:7]
		
	# doplni nuly
	elif(len(list[1])<7):
		length = len(list[1])
		fill = 7 - length
		part = list[1] + fill * "0"
	else:
		part = list[1]
	
	coord = list[0] + "." + part

	return coord
	
	

# upravi popis
def EditDesc(hint, cont, diff, terr):
	# optimalizace textu
	hint = Filter(hint)
		
	# velbloudi styl u dlouheho hintu
	if(len(hint)>59):
		list = string.split(hint)
		for x in range(len(list)):
			if(x%2==0):
				list[x] = string.upper(list[x])
			else:
				list[x] = string.lower(list[x])
		hint = string.join(list,"")
		
	# omezena delka nazvu
	if(len(hint)>59):
		hint = hint[:59] + "_"
		
	desc = cont[0] + diff[0] + terr[0] + " " + hint

	return desc
	
	

# nastavi barvu popisku podle typu cache
def EditType(typ):
	"""
	cerna = 0
	bila = 16777215
	sediva = 8421504
	hneda = 128
	cervena = 255
	zelena = 32768
	modra = 16711680
	zluta = 65535
	svetle zelena = 65280
	svetle modra = 16776960
	"""
	
	text = 16777215;
	back = 0;
	
	if(typ == "Traditional Cache"):
		text = "16777215";
		back = "32768";
	elif(typ == "Multi-cache"):
		text = "0";
		back = "65535";
	elif(typ == "Unknown Cache"):
		text = "16777215";
		back = "16711680";
	elif(typ == "Letterbox Hybrid"):
		text = "16777215";
		back = "8421504";
	elif(typ == "Wherigo Cache"):
		text = "0";
		back = "16776960";
	elif(typ == "Earthcache"):
		text = "16777215";
		back = "128";
	elif(typ == "Virtual Cache"):
		text = "0";
		back = "65280";
	elif(typ == "Webcam Cache"):
		text = "0";
		back = "16777215";
	elif(typ == "Event Cache"):
		text = "16777215";
		back = "255";
	elif(typ == "Cache In Trash Out Event"):
		text = "16777215";
		back = "255";
	elif(typ == "Mega-Event Cache"):
		text = "16777215";
		back = "255";
	elif(typ == "GPS Adventures Exhibit"):
		text = "16777215";
		back = "255";
	elif(typ == "Project APE Cache"):
		text = "16777215";
		back = "255";
		
	return text, back



### GPX2WPT ####################################################################

def Gpx2wpt():
	# osetreni parametru prikazove radky
	if(len(sys.argv) == 2 and sys.argv[1] == "-h"):
		Help()
		return
	elif(len(sys.argv) == 3):
		list1 = string.split(sys.argv[1], ".")
		list2 = string.split(sys.argv[2], ".")
		if(list1[-1] != "xml" and list1[-1] != "gpx" ):
			ErrorArg()
			return
		if(list2[-1] != "wpt"):
			ErrorArg()
			return
	else:
		ErrorArg()
		return
		
	# zruseni diakritiky
	if not (xmlchar.XmlChar(sys.argv[1])):
		return
		
	# parsovani xml
	try:
		parser = xml.sax.make_parser()
		parser.setContentHandler(Handler())
		parser.parse (sys.argv[1])
	except:
		ErrorXml()
		return

	# zapis do .wpt souboru
	file = open(sys.argv[2], "w")
	file.write(CONST_HEAD)
	
	for x in range(len(get)):
		name = get[x][0]
		lat = get[x][1]
		lon = get[x][2]
		hint = get[x][3]
		cont = get[x][4]
		diff = get[x][5]
		terr = get[x][6]
		typ = get[x][7]
		
		name = EditName(name)
		lat = EditCoord(lat)
		lon = EditCoord(lon)
		desc = EditDesc(hint, cont, diff, terr)
		textCol, backCol = EditType(typ)
		
		print
		print name
		print typ
		print lat, lon
		print desc
		
		# NUMBER, NAME,  LAT,  LON, XXX, WAYPOINT_SYMBOL, XXX, DISPLAY_FORMAT, FONT_COLOR, BACKGROUND_COLOR, DESCRIPTION, POINTER_DIRECTION, GARMIN_DISPLAY, PROXIMITY_DISTANCE, ALTITUDE, FONT_SIZE, FONT_BOLD, SYMBOL_SIZE, XXX, XXX, XXX,,,
		waypoint = "%d,%s,  %s,  %s,,0,0,3,%s,%s,%s,0,0,0,-777,6,0,17,0,10.0,2,,,\n" % (x+1, name, lat, lon, textCol, backCol, desc)	
		file.write(codecs.encode(waypoint, "utf-8"))
		
	file.close
	
	print
	print "Waypoint file " + sys.argv[2] + " was successfully created!"
	
	return True



### MAIN #######################################################################

if (__name__=="__main__"):
	Gpx2wpt()
